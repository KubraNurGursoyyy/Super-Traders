import Model from '../../../database/models';
import { PortfolioRoutes } from '../portfolio';
import { WalletRoutes } from '../wallet';
import { SharesRoutes } from '../wallet';
const httpStatus = require('http-status');

const createUser = async (req, res) => {
    try {

        return res.status(httpStatus.CREATED).send('Success');

    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
}

const sellShare = async (req, res) => {
    try {
        return res.status(httpStatus.CREATED).send('Success');

    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
}

const getUsersShare = async (req, res) => {
    try {
        return res.status(httpStatus.CREATED).send('Success');

    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
}

const buyShare = async (req, res) => {
    try {
        const userID = req.body.userID;
        const shareID = req.body.shareID;
        const share = await SharesRoutes.get(shareID);
        const shareStock = share.stock;
        const sharePrice = share.price;
        const usersMoney = await WalletRoutes.getUsersWallet(userID);
        if(share != null && shareStock > 0 && sharePrice <= usersMoney){
            const portfolio = await PortfolioRoutes.post({
                shareID: this.shareID,
                userID: this.userID,
                type: 'BUY'
            });
            await SharesRoutes.patch(shareID, {
                stock: this.share.stock - 1
            });
            await WalletRoutes.patch( userID, {
                money: this.usersMoney - sharePrice
            });
        }
        return res.status(httpStatus.CREATED).send('Success');

    } catch (error) {
        return res.status(httpStatus.BadRequest).json(errorHandling(error));
    }
}


//wallet ve user yaratılır
const create = async (req, res) => {
    try {
        const wallet = await WalletRoutes.post(req.body.wallet);
        const ob = await Model.user.create(req.body);
        return res.status(httpStatus.CREATED).send('Success');

    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
}

//sadece user update
const update = async (req, res) => {
    try {
        const id = req.params.id;
        const [updated] = await Model.user.update(req.body, {
            where: { id: id }
        });
        if (updated) {
            const updated = await Model.user.findOne({ where: { id: id } });
            return res.status(httpStatus.OK).send('Success');
        }
    throw new Error('Not found');
    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
};

//wallet ve user silinir
const remove = async (req, res) => {
    try {
        const id = req.params.id;
        const deleted = await Model.user.destroy({
            where: { id: id }
        });
        const walletDeleted = await WalletRoutes.delete(req.body.wallet);

        if (deleted && walletDeleted) {
            return res.status(httpStatus.NO_CONTENT).send('Success');
        }
    } catch (error) {
        return res.status(httpStatus.INTERNAL_SERVER_ERROR).json(errorHandling(error));
    }
};

module.exports = {
    create,
    remove,
    update
};
